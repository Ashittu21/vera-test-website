{"version":3,"sources":["components/heading.js","components/budget/budget.js","components/city-switcher/city-switcher.js","components/app/app.js","serviceWorker.js","index.js","components/app/Consolidated_72PoliceDepartments.csv"],"names":["LevelContext","createContext","HDown","props","Consumer","level","Provider","value","children","H","Heading","Math","min","formatDollars","Intl","NumberFormat","style","currency","Budget","data","className","RecursiveBudget","useContext","marginLeft","Object","keys","map","key","Array","isArray","format","total","CitySwitcher","dataByCity","selectData","cityOptions","d","label","useState","city","setCity","options","onChange","console","log","reduce","r","push","organizeBudget","groupByKey","forEach","department","category","rows","App","useCsv","dataSrc","src","setData","useEffect","fetch","then","res","text","csvParse","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.736c1372.chunk.js","sourcesContent":["import React, { createContext } from \"react\";\n\nexport const LevelContext = createContext(1);\n\nexport const HDown = (props) => {\n  return (\n    <LevelContext.Consumer>\n      {(level) => (\n        <LevelContext.Provider value={level + 1}>\n          {props.children}\n        </LevelContext.Provider>\n      )}\n    </LevelContext.Consumer>\n  );\n};\nexport const H = (props) => {\n  return (\n    <LevelContext.Consumer>\n      {(level) => {\n        const Heading = \"h\" + Math.min(level, 6);\n        return <Heading {...props} />;\n      }}\n    </LevelContext.Consumer>\n  );\n};\n\nexport default H;\n","import React, { useContext } from \"react\";\nimport \"./budget.scss\";\nimport { H, HDown, LevelContext } from \"components/heading\";\n\nconst formatDollars = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\nconst Budget = ({ data }) => {\n  return (\n    <div className=\"Budget\">\n      <RecursiveBudget data={data} />\n    </div>\n  );\n};\n\nconst RecursiveBudget = ({ data }) => {\n  const level = useContext(LevelContext);\n  return (\n    <HDown>\n      <div\n        className={`Budget-level--${level}`}\n        style={{ marginLeft: `${level * 2}rem` }}\n      >\n        {Object.keys(data).map((key) => {\n          if (Array.isArray(data[key])) {\n            return (\n              <div>\n                <div>\n                  {key}: {formatDollars.format(data[key][0].total)}\n                </div>\n              </div>\n            );\n          } else {\n            return (\n              <div>\n                <H>{key}</H>\n                <Budget data={data[key]} />\n              </div>\n            );\n          }\n        })}\n      </div>\n    </HDown>\n  );\n};\n\nexport default Budget;\n\n/* {Object.keys(data[department]).map((category) => {\n  return (\n    <div>\n      <h3>Category: {category}</h3>\n      {Object.keys(data[department][category]).map((lineitem) => {\n        return (\n          <div>\n            <h4>Line Item: {lineitem}</h4>\n            <div>\n              {JSON.stringify(data[department][category][lineitem])}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n})} */\n","import React, { useState } from \"react\";\nimport \"./city-switcher.scss\";\nimport Select from \"react-select\";\nimport Budget from \"components/budget\";\n\nconst CitySwitcher = ({ data }) => {\n  const dataByCity = selectData(data);\n  const cityOptions = Object.keys(dataByCity).map((d) => ({\n    value: d,\n    label: d,\n  }));\n\n  const [city, setCity] = useState(cityOptions[0].value);\n\n  return (\n    <div>\n      <Select\n        options={cityOptions}\n        value={city}\n        onChange={(value) => {\n          console.log(value);\n          setCity(value.value);\n        }}\n      />\n      <div>{city}</div>\n      <Budget data={dataByCity[city]} />\n    </div>\n  );\n};\n\nexport default CitySwitcher;\n\nconst selectData = (data) => {\n  const dataByCity = data.reduce((r, d) => {\n    if (!r[d[\"citystate\"]]) {\n      r[d[\"citystate\"]] = [];\n    }\n    r[d[\"citystate\"]].push(d);\n    return r;\n  }, {});\n\n  return organizeBudget(dataByCity);\n};\n\nconst organizeBudget = (data) => {\n  return Object.keys(data).reduce((r, city) => {\n    r[city] = groupByKey(\"department\", data[city]);\n    Object.keys(r[city]).forEach((department) => {\n      r[city][department] = groupByKey(\"expensecat\", r[city][department]);\n\n      Object.keys(r[city][department]).forEach((category) => {\n        r[city][department][category] = groupByKey(\n          \"expensedescrip\",\n          r[city][department][category]\n        );\n      });\n    });\n    return r;\n  }, {});\n};\n\nconst groupByKey = (key, rows) => {\n  return rows.reduce((r, d) => {\n    if (!r[d[key]]) {\n      r[d[key]] = [];\n    }\n    r[d[key]].push(d);\n    return r;\n  }, {});\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./app.scss\";\nimport dataSrc from \"./Consolidated_72PoliceDepartments.csv\";\nimport { csvParse } from \"d3-dsv\";\nimport CitySwitcher from \"components/city-switcher\";\n\nconst App = () => {\n  const data = useCsv(dataSrc);\n  if (!data) {\n    return <div>Loading</div>;\n  }\n\n  console.log(data);\n\n  return <CitySwitcher data={data} />;\n};\n\nexport default App;\n\nconst useCsv = (src) => {\n  const [data, setData] = useState();\n  useEffect(() => {\n    fetch(src)\n      .then((res) => res.text())\n      .then((res) => {\n        setData(csvParse(res));\n      });\n  }, [setData, src]);\n  return data;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Consolidated_72PoliceDepartments.21ec9f08.csv\";"],"sourceRoot":""}